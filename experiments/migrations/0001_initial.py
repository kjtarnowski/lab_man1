# Generated by Django 2.2 on 2020-11-04 11:24

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='LabPerson',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('lab_email', models.EmailField(max_length=254)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Aparat',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=25)),
            ],
        ),
        migrations.CreateModel(
            name='Compound',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=25, unique=True)),
                ('mass', models.FloatField(blank=True, default=None, null=True)),
                ('monoisotopic_mass', models.FloatField(blank=True, default=None, null=True)),
                ('formula', models.CharField(blank=True, default=None, max_length=50, null=True)),
                ('comments', models.TextField(default='-')),
            ],
        ),
        migrations.CreateModel(
            name='Experiment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comments', models.TextField(default='-')),
                ('experiment_date', models.DateField(blank=True, default=None, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('progress', models.CharField(choices=[('TBD', 'TBD'), ('ONGOING', 'ONGOING'), ('UC', 'UC'), ('TO_REP', 'TO_REP')], default='TBD', max_length=10)),
                ('final', models.BooleanField(default=False)),
                ('aparat', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='experiments_on_this_aparat', to='experiments.Aparat')),
                ('compound', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='experiments_for_compound', to='experiments.Compound')),
            ],
        ),
        migrations.CreateModel(
            name='ExperimentalSet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=25)),
                ('experiment_date', models.DateField(blank=True, default=None, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=25)),
            ],
        ),
        migrations.CreateModel(
            name='Experiment_ARR',
            fields=[
                ('experiment_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='experiments.Experiment')),
                ('result_ARR', models.FloatField(blank=True, default=None, null=True)),
                ('result_GSTS2i', models.FloatField(blank=True, default=None, null=True)),
            ],
            bases=('experiments.experiment',),
        ),
        migrations.CreateModel(
            name='Experiment_MLOGP',
            fields=[
                ('experiment_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='experiments.Experiment')),
                ('result_MLOGP', models.FloatField(blank=True, default=None, null=True)),
                ('result_Eta_beta', models.FloatField(blank=True, default=None, null=True)),
            ],
            bases=('experiments.experiment',),
        ),
        migrations.CreateModel(
            name='Experiment_Sp',
            fields=[
                ('experiment_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='experiments.Experiment')),
                ('result_Sp', models.FloatField(blank=True, default=None, null=True)),
                ('result_HyWi', models.FloatField(blank=True, default=None, null=True)),
            ],
            bases=('experiments.experiment',),
        ),
        migrations.AddField(
            model_name='experiment',
            name='experimental_set',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='experiments_of_this_set', to='experiments.ExperimentalSet'),
        ),
        migrations.AddField(
            model_name='experiment',
            name='lab_person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='experiments_of_person', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='compound',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='compounds_of_the_project', to='experiments.Project'),
        ),
        migrations.CreateModel(
            name='Result',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comments', models.TextField(default='-')),
                ('compound', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='results_for_compounds', to='experiments.Compound', unique=True)),
                ('experiment_ARR', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='results_of_experiment_ARR', to='experiments.Experiment_ARR')),
                ('experiment_MLOGP', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='results_of_experiment_MLOGP', to='experiments.Experiment_MLOGP')),
                ('experiment_Sp', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='results_of_experiment_Sp', to='experiments.Experiment_Sp')),
            ],
        ),
        migrations.AddConstraint(
            model_name='experiment',
            constraint=models.UniqueConstraint(fields=('compound', 'experimental_set'), name='compoud_from_set'),
        ),
    ]
